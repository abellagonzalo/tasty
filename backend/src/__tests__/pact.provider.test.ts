import { Verifier, LogLevel } from '@pact-foundation/pact';
import path from 'path';
import app from '../app';
import { positionService } from '../services/positionService';
import { OptionType, PositionSide } from '../models/Position';

describe('Pact Verification', () => {
  let server: any;
  const PORT = 3001;

  beforeAll((done) => {
    server = app.listen(PORT, () => {
      console.log(`Provider API listening on port ${PORT}`);
      done();
    });
  });

  afterAll((done) => {
    server.close(() => {
      console.log('Provider API server closed');
      done();
    });
  });

  it('should validate the expectations of the frontend consumer', async () => {
    const opts = {
      provider: 'TastyBackend',
      providerBaseUrl: `http://localhost:${PORT}`,

      // Point to the pact files generated by the consumer tests
      pactUrls: [
        path.resolve(
          __dirname,
          '../../..',
          'frontend',
          'pact',
          'pacts',
          'TastyFrontend-TastyBackend.json'
        ),
      ],

      // Provider state setup
      stateHandlers: {
        'no positions exist': async () => {
          // Clear all positions from the in-memory store
          positionService.clearPositions();
          return 'Positions cleared';
        },
        'positions exist': async () => {
          // Clear first and add test position
          positionService.clearPositions();

          // Add a test position
          await positionService.createPosition({
            symbol: 'AAPL',
            optionType: OptionType.CALL,
            strikePrice: 150,
            expirationDate: '2024-12-20T00:00:00.000Z',
            positionSide: PositionSide.LONG,
            quantity: 10,
            entryPrice: 5.25,
            entryDate: '2024-01-15T00:00:00.000Z',
          });

          return 'Test position created';
        },
        'a position with ID test-id-123 exists': async () => {
          // Clear first
          positionService.clearPositions();

          // Add position with specific ID by manually manipulating the service
          const position = await positionService.createPosition({
            symbol: 'AAPL',
            optionType: OptionType.CALL,
            strikePrice: 150,
            expirationDate: '2024-12-20T00:00:00.000Z',
            positionSide: PositionSide.LONG,
            quantity: 10,
            entryPrice: 5.25,
            entryDate: '2024-01-15T00:00:00.000Z',
          });

          // Override the ID to match the expected test ID
          (position as any).id = 'test-id-123';
          (positionService as any).positions[0].id = 'test-id-123';

          return 'Test position with ID created';
        },
      },

      // Log level for debugging
      logLevel: 'info' as LogLevel,

      // Timeout for verification
      timeout: 30000,
    };

    const verifier = new Verifier(opts);

    try {
      const output = await verifier.verifyProvider();
      console.log('Pact Verification Complete!');
      console.log(output);
    } catch (error) {
      console.error('Pact verification failed:', error);
      throw error;
    }
  }, 40000); // Increase Jest timeout for this test
});
